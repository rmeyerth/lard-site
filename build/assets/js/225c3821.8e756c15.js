"use strict";(self.webpackChunklarf_site=self.webpackChunklarf_site||[]).push([[9977],{5680:(e,t,r)=>{r.d(t,{xA:()=>c,yg:()=>y});var n=r(6540);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(r),d=a,y=u["".concat(l,".").concat(d)]||u[d]||g[d]||i;return r?n.createElement(y,o(o({ref:t},c),{},{components:r})):n.createElement(y,o({ref:t},c))}));function y(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},6410:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var n=r(8168),a=(r(6540),r(5680));const i={sidebar_position:1},o="Starter: Basic Literals / Operations",s={unversionedId:"examples/starter-projects/starter",id:"examples/starter-projects/starter",title:"Starter: Basic Literals / Operations",description:"Starter",source:"@site/docs/examples/starter-projects/starter.md",sourceDirName:"examples/starter-projects",slug:"/examples/starter-projects/starter",permalink:"/docs/examples/starter-projects/starter",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/examples/starter-projects/starter.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"More to come...",permalink:"/docs/tutorial/more-to-come"},next:{title:"Aardvark Tutorial Language",permalink:"/docs/examples/aardvark"}},l={},p=[{value:"Using the Languages Runner",id:"using-the-languages-runner",level:3},{value:"Verifying the basic types",id:"verifying-the-basic-types",level:3}],c={toc:p},u="wrapper";function g(e){let{components:t,...i}=e;return(0,a.yg)(u,(0,n.A)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"starter-basic-literals--operations"},"Starter: Basic Literals / Operations"),(0,a.yg)("p",null,(0,a.yg)("img",{alt:"Starter",src:r(77).A,width:"1890",height:"367"}),"\nRepository: ",(0,a.yg)("a",{parentName:"p",href:"https://www.gitlab.com/tronied/larf-starter"},"https://www.gitlab.com/tronied/larf-starter")),(0,a.yg)("p",null,"This is a starter project for Language Architect and Runtime Framework (LAF). It contains a basic set of\nconfigured types as well as a runner and gradle project in order to get started quickly. This can then\nbe used as a base for how you'd like to configure your project, whether that's typed or typeless, use\ncode-blocks or whitespace indentation or have an alternative notation type."),(0,a.yg)("h1",{id:"building-the-project"},"Building the project"),(0,a.yg)("admonition",{title:"Standalone",type:"tip"},(0,a.yg)("p",{parentName:"admonition"},"This project uses a 3rd party tool (Shadow JAR) to ensure that the Jar can be independently run.")),(0,a.yg)("p",null,"To build the project ensure you have gradle and at least Java 8+ installed. Run the command:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"gradle clean shadowJar\n")),(0,a.yg)("p",null,"This will create the projects JAR within the ",(0,a.yg)("inlineCode",{parentName:"p"},"./build/libs")," folder."),(0,a.yg)("h3",{id:"using-the-languages-runner"},"Using the Languages Runner"),(0,a.yg)("p",null,"Once the project has been built, to run the included runner class type the following:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"java -jar ./build/libs/larf-starter-0.1-all.jar\n")),(0,a.yg)("p",null,"You will then be presented with the following:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"Starter Language Test Utility\n=============================\n\n")),(0,a.yg)("h3",{id:"verifying-the-basic-types"},"Verifying the basic types"),(0,a.yg)("p",null,"The basic set of literal types can be found in the tokens/literal package. These are configured in the StarterConfig\nwhich is found in the config package. To test that the basic types are loaded, we can do the following:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"Starter Language Test Utility\n=============================\n1.5\nResult: 1.5 (Type: BigDecimal, Time taken: 14ms)\n1.5F\nResult: 1.5 (Type: Float, Time taken: 2ms)\n123456789L\nResult: 123456789 (Type: Long, Time taken: 5ms)\n12\nResult: 12 (Type: Integer, Time taken: 1ms)\ntrue\nResult: true (Type: Boolean, Time taken: 2ms)\n'hello'\nResult: hello (Type: String, Time taken: 1ms)\n\"hello\"\nResult: hello (Type: String, Time taken: 1ms)\n")),(0,a.yg)("p",null,"To exit the runner, simply type ",(0,a.yg)("inlineCode",{parentName:"p"},"exit"),"."))}g.isMDXComponent=!0},77:(e,t,r)=>{r.d(t,{A:()=>n});const n=r.p+"assets/images/starter-6af9a1f257d663bc2d0283ffca493d6f.jpg"}}]);
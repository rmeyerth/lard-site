"use strict";(self.webpackChunklarf_site=self.webpackChunklarf_site||[]).push([[9397],{5680:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>h});var a=t(6540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},g=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(t),g=r,h=c["".concat(s,".").concat(g)]||c[g]||d[g]||i;return t?a.createElement(h,o(o({ref:n},u),{},{components:t})):a.createElement(h,o({ref:n},u))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=g;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[c]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},7716:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=t(8168),r=(t(6540),t(5680));const i={sidebar_position:3},o="Indent: Typed, Whitespace",l={unversionedId:"examples/indent",id:"examples/indent",title:"Indent: Typed, Whitespace",description:"Indent",source:"@site/docs/examples/indent.md",sourceDirName:"examples",slug:"/examples/indent",permalink:"/docs/examples/indent",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/examples/indent.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Aardvark Tutorial Language",permalink:"/docs/examples/aardvark"},next:{title:"SLOP: Typeless, Codeblocks",permalink:"/docs/examples/slop"}},s={},p=[{value:"Using the Languages Runner",id:"using-the-languages-runner",level:3},{value:"Running Examples",id:"running-examples",level:3}],u={toc:p},c="wrapper";function d(e){let{components:n,...i}=e;return(0,r.yg)(c,(0,a.A)({},u,i,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"indent-typed-whitespace"},"Indent: Typed, Whitespace"),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Indent",src:t(2564).A,width:"1987",height:"390"}),"\nRepository: ",(0,r.yg)("a",{parentName:"p",href:"https://www.gitlab.com/tronied/indent"},"https://www.gitlab.com/tronied/indent")),(0,r.yg)("p",null,"This project shows off both typed and whitespace support for languages using LARF. The language shows off features\nsuch as constants, type checking, variables and indentation validation. The scope of the language feature-set is\nlimited as it is there purely to demonstrate it working rather than matching the functionality of a language like Python."),(0,r.yg)("h1",{id:"building-the-project"},"Building the project"),(0,r.yg)("admonition",{title:"Standalone",type:"tip"},(0,r.yg)("p",{parentName:"admonition"},"This project uses a 3rd party tool (Shadow JAR) to ensure that the Jar can be independently run.")),(0,r.yg)("p",null,"To build the project ensure you have gradle and at least Java 8+ installed. Run the command:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"gradle clean shadowJar\n")),(0,r.yg)("h3",{id:"using-the-languages-runner"},"Using the Languages Runner"),(0,r.yg)("p",null,"Once the project has been built, to run the runner class type the following:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"java -jar ./build/libs/mal-0.1-all.jar\n")),(0,r.yg)("p",null,"You will then be presented with the following:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"Indent Language Test Utility\n============================\n[Multi-line enabled] Please add <newline> + '.' + <return> to the end of a finished expression to evaluate the result.\n\n")),(0,r.yg)("h3",{id:"running-examples"},"Running Examples"),(0,r.yg)("p",null,"The language currently has limited functionality, but does support the use of if statements:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"int i = 1\nint j = 2\nif i == 1 then\n    i = j\n    j += 2\n    if i == 2 then\n        i = j\n        j += 2\n        if i == 4 then\n            return i + j\n.\nResult: 10 (Type: Integer, Time taken: 71ms)\n")),(0,r.yg)("p",null,"We can test out the indentation validation by using the following:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"int i = 1\nif i == 1 then\n    i =\n 2\n     if i == 2 then\n        i = 3\n        if i == 3 then\n            int j\nreturn i\n.\nError: Invalid whitespace used on line 5. Ensure code is uniformly indented using 1 tab or 4 spaces\n")),(0,r.yg)("p",null,"The above shows that line 5 is at fault and not line 4. Line 4 is in fact valid with assignments to variables able to\nbe set on new lines. Line 5 however does not adhere to the fixed whitespace indentation the language requires. This\nproject uses a fixed whitespace indentation which as stated is either 1 tab or 4 spaces. This can be configured to\na different value by using the following via the config object:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},'config.setProperty((DefaultProperty)DefaultProperty.WHITESPACE_VALUE, (Object)"\\t|    ");\n')),(0,r.yg)("p",null,"If you wish don't wish to specify a fixed whitespace value, LARF can identify the whitespace used and set that as the\nrule by which all subsequent code indentation is validated. To do this you can use:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"config.setProperty(DefaultProperty.CODE_BLOCK_STYLE, CodeBlockStyle.WHITESPACE_IDENTIFY);\n")),(0,r.yg)("p",null,"To exit the runner, simply type ",(0,r.yg)("inlineCode",{parentName:"p"},"exit"),"."))}d.isMDXComponent=!0},2564:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/indent-cb8389f16da513e66fc33841152399f5.jpg"}}]);
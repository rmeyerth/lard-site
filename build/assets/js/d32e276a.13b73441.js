"use strict";(self.webpackChunklarf_site=self.webpackChunklarf_site||[]).push([[4837],{5680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>g});var o=n(6540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},y=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),y=r,g=u["".concat(s,".").concat(y)]||u[y]||d[y]||i;return n?o.createElement(g,a(a({ref:t},p),{},{components:n})):o.createElement(g,a({ref:t},p))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=y;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,a[1]=l;for(var c=2;c<i;c++)a[c]=n[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}y.displayName="MDXCreateElement"},2273:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var o=n(8168),r=(n(6540),n(5680));const i={sidebar_position:11},a="Code Block Style",l={unversionedId:"toolkit/code-blocks",id:"toolkit/code-blocks",title:"Code Block Style",description:"Code Blocks",source:"@site/docs/toolkit/code-blocks.md",sourceDirName:"toolkit",slug:"/toolkit/code-blocks",permalink:"/docs/toolkit/code-blocks",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/toolkit/code-blocks.md",tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_position:11},sidebar:"tutorialSidebar",previous:{title:"Jumping",permalink:"/docs/toolkit/jumping"},next:{title:"Runner",permalink:"/docs/toolkit/runner"}},s={},c=[{value:"Delimiter",id:"delimiter",level:3},{value:"Whitespace",id:"whitespace",level:3}],p={toc:c},u="wrapper";function d(e){let{components:t,...i}=e;return(0,r.yg)(u,(0,o.A)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"code-block-style"},"Code Block Style"),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Code Blocks",src:n(9941).A,width:"1464",height:"346"}),"\nLanguages typically use either a block-structured (Delimiter) or whitespace / indentation style of code blocks. LARF supports both of\nthese using ",(0,r.yg)("inlineCode",{parentName:"p"},"config.setProperty(DefaultProperty.CODE_BLOCK_STYLE, CodeBlockStyle.*)")," with the possible values:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"CodeBlockStyle.DELIMITER"),(0,r.yg)("li",{parentName:"ul"},"CodeBlockStyle.WHITESPACE_FIXED"),(0,r.yg)("li",{parentName:"ul"},"CodeBlockStyle.WHITESPACE_IDENTIFY")),(0,r.yg)("h3",{id:"delimiter"},"Delimiter"),(0,r.yg)("p",null,"Delimiter-based code blocks are the most common with either a keyword or character representing the beginning of end. Here is an example\nof a code block in C / C++ / Java:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"if (2 > 1) {\n    //...\n}\n")),(0,r.yg)("p",null,"It uses an opening and closing curly brace to represent this. To show some other examples, here is Pascal:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"if 2 > 1 then\nbegin\n    //...\nend;\n")),(0,r.yg)("p",null,"This is the default code-block style within LARF and needs no further configuration other than to set up your token."),(0,r.yg)("h3",{id:"whitespace"},"Whitespace"),(0,r.yg)("p",null,'Whitespace based code-blocks is where the language uses indentation or "whitespace" characters (spaces / tabs) to identify blocks of code.\nPython and Haskell are examples of languages that uses idententation. They allow a user to define their own indentation value, but it has\nto be consistent. This would match the ',(0,r.yg)("inlineCode",{parentName:"p"},"CodeBlockStyle.WHITESPACE_IDENTIFY")," value:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'def greet(name):\n    if name:\n        greeting = "Hello, " + name + "!"\n        print(greeting)\n    else:\n        print("Hello, there!")\n\ngreet("Alice")\n')),(0,r.yg)("p",null,"If you are not consistent with the indentation, like with Python LARF will throw an indentation error. For example, running the following:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"int i = 1\nif i == 1 then\n    i = 2\n     if i == 2 then\n        i = 3\n        if i == 3 then\n            int j\nreturn i\n")),(0,r.yg)("p",null,"Will give the following error:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"Invalid whitespace used on line 4. Ensure code is uniformly indented using 4 spaces\n")),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"4 spaces")," was the value taken from the initial indentation and was the rule that the following code must adhere to. If you wish to\nuse a predefined indentation instead of automatic identification, you can use the ",(0,r.yg)("inlineCode",{parentName:"p"},"CodeBlockStyle.WHITESPACE_FIXED")," and customize the\nwhitespace value by using ",(0,r.yg)("inlineCode",{parentName:"p"},'setProperty(DefaultProperty.WHITESPACE_VALUE, "\\t|    ");'),". The value may consist of one or more indentation\nvalues separated by a ",(0,r.yg)("inlineCode",{parentName:"p"},"|")," character."))}d.isMDXComponent=!0},9941:(e,t,n)=>{n.d(t,{A:()=>o});const o=n.p+"assets/images/code-block-e6d58136657e32276ae451d371389677.jpg"}}]);
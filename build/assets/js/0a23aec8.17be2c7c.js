"use strict";(self.webpackChunklarf_site=self.webpackChunklarf_site||[]).push([[7500],{5680:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>g});var r=n(6540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),d=a,g=c["".concat(i,".").concat(d)]||c[d]||m[d]||o;return n?r.createElement(g,l(l({ref:t},u),{},{components:n})):r.createElement(g,l({ref:t},u))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[c]="string"==typeof e?e:a,l[1]=s;for(var p=2;p<o;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3046:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(8168),a=(n(6540),n(5680));const o={sidebar_position:5},l="My Assembly Language (MAL)",s={unversionedId:"examples/mal",id:"examples/mal",title:"My Assembly Language (MAL)",description:"My Assembly Language",source:"@site/docs/examples/mal.md",sourceDirName:"examples",slug:"/examples/mal",permalink:"/docs/examples/mal",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/examples/mal.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"SLOP: Typeless, Codeblocks",permalink:"/docs/examples/slop"},next:{title:"Support",permalink:"/docs/support"}},i={},p=[{value:"Compiling the project",id:"compiling-the-project",level:3},{value:"Using the Languages Runner",id:"using-the-languages-runner",level:3}],u={toc:p},c="wrapper";function m(e){let{components:t,...o}=e;return(0,a.yg)(c,(0,r.A)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"my-assembly-language-mal"},"My Assembly Language (MAL)"),(0,a.yg)("p",null,(0,a.yg)("img",{alt:"My Assembly Language",src:n(7226).A,width:"1972",height:"385"}),"\nRepository: ",(0,a.yg)("a",{parentName:"p",href:"https://www.gitlab.com/tronied/mal"},"https://www.gitlab.com/tronied/mal")),(0,a.yg)("p",null,"This project was a proof of concept for an assembly language interpreter in LARF. The scope of this project\nwas limited to the following code sample, but could be expanded further in the future."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-asm"},"section .data\n    counter db 1\n    sum     db 0\n\nsection .text\n    global _start\n\n_start:\n    ; loop from 1 to 5\n    loop:\n        ADD [sum], [counter] ; add counter to sum\n        inc byte [counter]   ; increment counter\n        cmp [counter], 5     ; compare counter with 5\n        jle loop             ; if counter <= 5, jump to loop\n\n    ; exit with sum as status code\n    movzx eax, byte [sum]   ; zero-extend sum to 32 bits\n    int 0x80                ; call kernel\n")),(0,a.yg)("p",null,"Whilst I could use existing features for the majority, there were one or two missing features I needed to\nmake this possible. These were jump and label support which, up until then was not possible. I added new\nparser flags with support for this behaviour into the Parser. A pre-scan for labels is undertaken prior\nto execution. This allows the program to jump to that point (both forwards and backwards) without any\nadditional effort by the developer. Jumping is disabled by default but can be enabled, along with several\nother properties. This is how MAL is currently configured:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-java"},"setProperty(DefaultProperty.FORWARD_JUMPING, true);\nsetProperty(DefaultProperty.GLOBAL_SCOPE, true);\nsetProperty(DefaultProperty.CASE_SENSITIVE, false);\nsetProperty(DefaultProperty.JUMP_SUPPORT, true);\n")),(0,a.yg)("p",null,"Global scope ensures that declared variables are accessible within the programme. Forward jumping has also\nbeen enabled, but this is typically not a feature of most languages. The project uses the context to store\nvalues in each operation under the associated register names."),(0,a.yg)("h3",{id:"compiling-the-project"},"Compiling the project"),(0,a.yg)("admonition",{title:"Standalone",type:"tip"},(0,a.yg)("p",{parentName:"admonition"},"This project uses a 3rd party tool (Shadow JAR) to ensure that the Jar can be independently run.")),(0,a.yg)("p",null,"To compile the project run the following command in the main projects folder:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"gradle clean shadowJar\n")),(0,a.yg)("h3",{id:"using-the-languages-runner"},"Using the Languages Runner"),(0,a.yg)("p",null,"Once the project has been built, to run the runner class type the following:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"java -jar ./build/libs/mal-0.1-all.jar\n")),(0,a.yg)("p",null,"You will then be presented with the following:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"My Assembly Language Test Utility\n=================================\n[Multi-line enabled] Please add <newline> + '.' + <return> to the end of a finished expression to evaluate the result.\n")),(0,a.yg)("p",null,"To run the example, we need to use a different approach to normal as the result is not returned but instead set to a\nregister. Let's see this by running the example:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"section .data\n    counter db 1\n    sum     db 0\n\nsection .text\n    global _start\n\n_start:\n    ; loop from 1 to 5\n    loop:\n        ADD [sum], [counter] ; add counter to sum\n        inc byte [counter]   ; increment counter\n        cmp [counter], 5     ; compare counter with 5\n        jle loop             ; if counter <= 5, jump to loop\n\n    ; exit with sum as status code\n    movzx eax, byte [sum]   ; zero-extend sum to 32 bits\n    int 0x80                ; call kernel\n.\nResult: null (Type: Null, Time taken: 51ms)\n")),(0,a.yg)("p",null,"Since the actual result is set to a register called ",(0,a.yg)("inlineCode",{parentName:"p"},"eax"),", we can evaluate this by specifying this along with a period\non a new line:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"eax\n.\nResult: 15 (Type: Integer, Time taken: 1ms)\n")),(0,a.yg)("p",null,"We get a result of 15 which is expected. If the counter is initially set to 1 and on each iteration added to sum. We get\n",(0,a.yg)("inlineCode",{parentName:"p"},"1 + 2 + 3 + 4 + 5")," as we've set the number of iterations at 5. This therefore correctly prints out 15."),(0,a.yg)("p",null,"To exit, simply type ",(0,a.yg)("inlineCode",{parentName:"p"},"exit")," and enter."))}m.isMDXComponent=!0},7226:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/mal-3a843cc1b326042929b76a48fea9057e.jpg"}}]);
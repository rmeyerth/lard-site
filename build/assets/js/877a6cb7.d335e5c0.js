"use strict";(self.webpackChunklarf_site=self.webpackChunklarf_site||[]).push([[3208],{5680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>g});var r=t(6540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(t),f=o,g=u["".concat(c,".").concat(f)]||u[f]||d[f]||a;return t?r.createElement(g,s(s({ref:n},p),{},{components:t})):r.createElement(g,s({ref:n},p))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,s=new Array(a);s[0]=f;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i[u]="string"==typeof e?e:o,s[1]=i;for(var l=2;l<a;l++)s[l]=t[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},4854:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var r=t(8168),o=(t(6540),t(5680));const a={sidebar_position:2},s="References",i={unversionedId:"toolkit/tokens/references",id:"toolkit/tokens/references",title:"References",description:"References",source:"@site/docs/toolkit/tokens/references.md",sourceDirName:"toolkit/tokens",slug:"/toolkit/tokens/references",permalink:"/docs/toolkit/tokens/references",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/toolkit/tokens/references.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Instances",permalink:"/docs/toolkit/tokens/instances"},next:{title:"Callbacks",permalink:"/docs/toolkit/tokens/callbacks"}},c={},l=[],p={toc:l},u="wrapper";function d(e){let{components:n,...a}=e;return(0,o.yg)(u,(0,r.A)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"references"},"References"),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"References",src:t(5452).A,width:"1453",height:"298"}),"\nWhen strict syntax checking is enabled, all values outside of literals and static syntax are blocked by the lexer\nby default. This includes things like names assigned to variables, constants and functions. This is where the\n",(0,o.yg)("inlineCode",{parentName:"p"},"ReferenceToken")," class can be used to store and represent these values. If no reference token is set then for\nthe expression ",(0,o.yg)("inlineCode",{parentName:"p"},"int i = 1;"),", the error ",(0,o.yg)("inlineCode",{parentName:"p"},"Unexpected token 'i' found in expression. Strict syntax checking is enabled"),"\nwill be returned. A class which is an extension of the ReferenceToken acts as a placeholder and associated with\nthe tokens to which they belong. Let's take a look at an example of one of these classes:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-java"},'@NoArgsConstructor\npublic class ValueRefToken extends ReferenceToken<String> {\n\n    public ValueRefToken(String value) {\n        super("Reference", value);\n    }\n\n    @Override\n    public Token<String> createToken(String value) {\n        return new ValueRefToken(value);\n    }\n\n    @Override\n    public String getPattern() {\n        return "^[A-Za-z0-9_]+";\n    }\n\n    @Override\n    public Optional<String> getGuidance(String token, List<Integer> groupsCount) {\n        return Optional.empty();\n    }\n\n    @Override\n    protected List<Token<?>> process(LARFParser parser, LARFContext context, LARFConfig config) {\n        return Collections.singletonList(this);\n    }\n}\n')),(0,o.yg)("p",null,"It is a very simple class which defined a regular expression pattern. There is no need to set the PatternType as this\nis set automatically in the parent class. In this case we want to match any value which is an alpha-numeric value in\nan expression String. To add this class to the configuration, we use the ",(0,o.yg)("inlineCode",{parentName:"p"},"setReferenceToken")," method:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-java"},"class MyConfig extends LARFConfig {\n    //...\n    @Override\n    protected void initTokenHandlers() {\n        //...\n        setReferenceToken(new ValueRefToken());\n    }\n    //...\n}\n")),(0,o.yg)("p",null,"This now ensures all values outside of the list of configured literals and match the pattern are stored into this\ntoken to be processed."))}d.isMDXComponent=!0},5452:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/references-6df2ebca029dac4c8aa840970d1b3bd5.jpg"}}]);
"use strict";(self.webpackChunklarf_site=self.webpackChunklarf_site||[]).push([[4074],{5680:(e,n,t)=>{t.d(n,{xA:()=>s,yg:()=>y});var r=t(6540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var d=r.createContext({}),c=function(e){var n=r.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=c(e.components);return r.createElement(d.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,d=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=c(t),g=a,y=u["".concat(d,".").concat(g)]||u[g]||p[g]||o;return t?r.createElement(y,i(i({ref:n},s),{},{components:t})):r.createElement(y,i({ref:n},s))}));function y(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=g;var l={};for(var d in n)hasOwnProperty.call(n,d)&&(l[d]=n[d]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},4799:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=t(8168),a=(t(6540),t(5680));const o={sidebar_position:1},i="Getting Started",l={unversionedId:"tutorial/getting-started",id:"tutorial/getting-started",title:"Getting Started",description:"Dependency",source:"@site/docs/tutorial/getting-started.mdx",sourceDirName:"tutorial",slug:"/tutorial/getting-started",permalink:"/docs/tutorial/getting-started",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial/getting-started.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Runner",permalink:"/docs/toolkit/runner"},next:{title:"In the beginning...",permalink:"/docs/tutorial/in-the-beginning"}},d={},c=[{value:"Dependency",id:"dependency",level:3},{value:"Configuration",id:"configuration",level:3},{value:"Runner",id:"runner",level:3}],s={toc:c},u="wrapper";function p(e){let{components:n,...t}=e;return(0,a.yg)(u,(0,r.A)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"getting-started"},"Getting Started"),(0,a.yg)("h3",{id:"dependency"},"Dependency"),(0,a.yg)("p",null,"Start a new project in your favourite IDE and give it a name. I've called mine ",(0,a.yg)("strong",{parentName:"p"},"Aardvark")," for no particular reason.\nIn most cases your project should have been created with either a build.gradle (Gradle) or pom.xml (Maven) file in the\nroot directory. These represent build automation tools and to which we'll need to add the following dependency:"),(0,a.yg)("admonition",{title:"No build file",type:"tip"},(0,a.yg)("p",{parentName:"admonition"},"If your project does not contain a build file then you may have created a blank project. I'd recommend to either\nre-create the project and selecting Gradle or Maven, or using one of the starter projects.")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-gradle",metastring:'title="build.gradle"',title:'"build.gradle"'},"dependencies {\n    implementation 'dev.larf:larf-core:0.89'\n}\n")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-xml",metastring:'title="pom.xml"',title:'"pom.xml"'},"<dependencies>\n    <dependency>\n        <groupId>dev.larf</groupId>\n        <artifactId>larf-core</artifactId>\n        <version>0.89</version>\n    </dependency>\n</dependencies>\n")),(0,a.yg)("p",null,"A projects structure can differ depending on your chosen build tool / IDE, but it should have a structure similar\nto the following:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"[gradle]\n[src]\n   [main]\n       [java]\n           [com.aardvark]\n               Application.java\n   [test]\n        ... \nbuild.gradle\ngradlew\ngradlew.bat\nsettings.gradle\n")),(0,a.yg)("h3",{id:"configuration"},"Configuration"),(0,a.yg)("p",null,"The first thing to do will be to create a configuration file. This is where all your tokens, operators and properties\nare defined which determine how your language will look and operate. We'll first add a config folder to the structure\nand put our new class in that:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"[src]\n   [main]\n       [java]\n           [com.aardvark]\n               [config]\n                   AardvarkConfig.java\n               Application.java\n")),(0,a.yg)("p",null,"Extending our class from LARFConfig will require us to implement several methods:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-java"},"public class AardvarkConfig extends LARFConfig {\n\n  @Override\n  protected void initTokenHandlers() { }\n\n  @Override\n  protected void initFunctions() { }\n\n  @Override\n  protected TypeOperation initTypeOperations() { retuurn null; }\n\n  @Override\n  protected void initOperators() { }\n\n  @Override\n  protected void initParserFormatters() { }\n}\n")),(0,a.yg)("p",null,"Don't worry about the content of these methods as we'll get to these in due time."),(0,a.yg)("h3",{id:"runner"},"Runner"),(0,a.yg)("p",null,"Next we'll modify the existing Application.java file in the root of the project directory. We'll change it to extend another class called LARFRunner*\nand define the following in the main method:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-java"},'public class Application extends LARFRunner {\n\n  public static void main(String[] args) {\n    AardvarkConfig config = new AardvarkConfig();\n    LARFProcessor processor = new LARFProcessor(config);\n    run("Aardvark Language", processor);\n  }\n}\n')),(0,a.yg)("admonition",{title:"Runner class",type:"tip"},(0,a.yg)("p",{parentName:"admonition"},"The LARFRunner utility class is runnable allowing you to write, evaluate and test code in your language.")),(0,a.yg)("p",null,"Run the application and you'll be presented with the following:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"Aardvark Language Test Utility\n==============================\n\n")),(0,a.yg)("p",null,"From here you'll be able to evaluate expressions and debug your code. Now that we have the basics sorted, let's get\nstarted writing our language."))}p.isMDXComponent=!0}}]);